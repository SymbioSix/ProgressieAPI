basePath: /v1
consumes:
- application/json
definitions:
  To_do_list.Todoall:
    properties:
      Customremind:
        $ref: '#/definitions/models.TdCustomTarget'
      SubCourseremind:
        $ref: '#/definitions/models.TdSubcourseReminder'
    type: object
  models.Checklist:
    properties:
      checklist_id:
        type: string
      date_checked:
        type: string
      target_id:
        type: string
    type: object
  models.CourseModel:
    properties:
      course_category:
        type: string
      course_id:
        type: string
      course_image:
        type: string
      course_name:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      description:
        type: string
      price:
        type: number
      status:
        type: string
      sub_courses:
        items:
          $ref: '#/definitions/models.SubCourseModel'
        type: array
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  models.EnrollmentModel:
    properties:
      course_id:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      point_achieved:
        type: integer
      progress:
        type: number
      status:
        type: string
      the_course:
        $ref: '#/definitions/models.CourseModel'
      updated_at:
        type: string
      updated_by:
        type: string
      user_id:
        type: string
    type: object
  models.ForgotPasswordRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  models.HealthMap:
    properties:
      database_status:
        type: string
      overall_status:
        type: string
      supabase_api_status:
        type: string
    type: object
  models.Land_Aboutus_Request:
    properties:
      aboutus_component_id:
        description: Primary key
        type: integer
      aboutus_component_jobdesc:
        type: string
      aboutus_component_name:
        type: string
      aboutus_component_photo:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      description:
        type: string
      status:
        type: string
      tooltip:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  models.Land_Aboutus_Response:
    properties:
      aboutus_component_id:
        type: integer
      aboutus_component_jobdesc:
        type: string
      aboutus_component_name:
        type: string
      aboutus_component_photo:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      description:
        type: string
      status:
        type: string
      tooltip:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  models.Land_Faq_Request:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      faq_category:
        type: integer
      faq_description:
        type: string
      faq_id:
        type: integer
      faq_title:
        type: string
      tooltip:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  models.Land_Faq_Response:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      faq_category:
        type: integer
      faq_description:
        type: string
      faq_id:
        type: integer
      faq_title:
        type: string
      tooltip:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  models.Land_Faqcategory_Request:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      faq_category_id:
        type: integer
      faq_category_name:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  models.Land_Faqcategory_Response:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      faq_category_id:
        type: integer
      faq_category_name:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  models.Land_Footer_Request:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      endpoint:
        type: string
      footer_component_group:
        description: Foreign key
        type: integer
      footer_component_icon:
        type: string
      footer_component_id:
        description: Primary key
        type: integer
      footer_component_name:
        type: string
      tooltip:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  models.Land_Footer_Response:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      endpoint:
        type: string
      footer_component_group:
        type: integer
      footer_component_icon:
        type: string
      footer_component_id:
        type: integer
      footer_component_name:
        type: string
      tooltip:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  models.Land_Hero_Request:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      hero_component_cover_img:
        type: string
      hero_component_id:
        description: Primary key
        type: integer
      hero_component_image:
        type: string
      hero_component_subtitle:
        type: string
      hero_component_title:
        type: string
      tooltip:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  models.Land_Hero_Response:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      hero_component_cover_img:
        type: string
      hero_component_id:
        type: integer
      hero_component_image:
        type: string
      hero_component_subtitle:
        type: string
      hero_component_title:
        type: string
      tooltip:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  models.Land_Navbar_Request:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      endpoint:
        type: string
      nav_component_group:
        type: integer
      nav_component_icon:
        type: string
      nav_component_id:
        type: integer
      nav_component_name:
        type: string
      tooltip:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  models.Land_Navbar_Response:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      endpoint:
        type: string
      nav_component_group:
        type: integer
      nav_component_icon:
        type: string
      nav_component_id:
        type: integer
      nav_component_name:
        type: string
      tooltip:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  models.ParseCustomTargetFromAchievement:
    properties:
      custom_targets:
        items:
          $ref: '#/definitions/models.TdCustomTarget'
        type: array
    type: object
  models.ParseSessionsForAuth:
    properties:
      access_token:
        type: string
      data:
        $ref: '#/definitions/models.UserRoleResponse'
      expired_at:
        type: integer
      expires_in:
        type: integer
      refresh_token:
        type: string
      token_type:
        type: string
    type: object
  models.RequestCustomTarget:
    properties:
      achievement_id:
        type: string
      daily_reminder:
        type: string
      target_icon:
        type: string
      target_subtitle:
        type: string
      target_title:
        type: string
    type: object
  models.RequestTdSubcourseReminder:
    properties:
      icon:
        type: string
      is_finished:
        type: boolean
      reminder_id:
        type: string
      reminder_time:
        type: string
      reminder_title:
        type: string
      start_date:
        type: string
      subcourseprogress_id:
        type: string
    type: object
  models.RoleModel:
    properties:
      created_by:
        type: string
      description:
        type: string
      id:
        type: string
      role_name:
        type: string
      status:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  models.RoleSidebarResponse:
    properties:
      allow_add:
        type: boolean
      allow_delete:
        type: boolean
      allow_edit:
        type: boolean
      allow_view:
        type: boolean
      role_data:
        $ref: '#/definitions/models.RoleModel'
      role_id:
        type: string
      sidebar_data:
        $ref: '#/definitions/models.SidebarModel'
      sidebarmenu_id:
        type: string
    type: object
  models.SidebarModel:
    properties:
      createdBy:
        type: string
      endpoint:
        type: string
      sidebar_group:
        type: string
      sidebar_name:
        type: string
      sidebarmenu_id:
        type: string
      status:
        type: string
      updatedAt:
        type: string
      updatedBy:
        type: string
    type: object
  models.SignInRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.SignUpRequest:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  models.StatusModel:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  models.SubCourseModel:
    properties:
      course_id:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      description:
        type: string
      progress:
        $ref: '#/definitions/models.SubcourseProgress'
      reading_contents:
        items:
          $ref: '#/definitions/models.SubCourseReadingContentModel'
        type: array
      sequence:
        type: integer
      status:
        type: string
      subcourse_id:
        type: string
      subcourse_name:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
      video_content:
        $ref: '#/definitions/models.SubCourseVideoContentModel'
    type: object
  models.SubCourseReadingContentModel:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      earned_point:
        type: integer
      reading_duration:
        type: integer
      reading_images:
        items:
          $ref: '#/definitions/models.SubCourseReadingImageContentModel'
        type: array
      status:
        type: string
      subcourse_id:
        type: string
      subcoursereading_id:
        type: string
      subtitle:
        type: string
      title:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  models.SubCourseReadingImageContentModel:
    properties:
      description:
        type: string
      image_link:
        type: string
      subcoursereading_id:
        type: string
    type: object
  models.SubCourseVideoContentModel:
    properties:
      description:
        type: string
      earned_point:
        type: integer
      status:
        type: string
      subcourse_id:
        type: string
      video_link:
        type: string
    type: object
  models.SubcourseProgress:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      is_subcourse_finished:
        type: boolean
      is_video_viewed:
        type: boolean
      reminders:
        items:
          $ref: '#/definitions/models.TdSubcourseReminder'
        type: array
      subcourse_id:
        type: string
      subcourseprogress_id:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
      user_id:
        type: string
    type: object
  models.TdCustomTarget:
    properties:
      achievement_id:
        type: string
      checklists:
        items:
          $ref: '#/definitions/models.Checklist'
        type: array
      created_at:
        type: string
      daily_clock_reminder:
        type: string
      due_at:
        type: string
      target_icon:
        type: string
      target_id:
        type: string
      target_subtitle:
        type: string
      target_title:
        type: string
      type:
        type: string
      updated_at:
        type: string
    type: object
  models.TdSubcourseReminder:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      icon:
        type: string
      is_finished:
        type: boolean
      reminder_id:
        type: string
      reminder_time:
        type: string
      reminder_title:
        type: string
      start_date:
        type: string
      subcourseprogress_id:
        type: string
      type:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  models.UpdateEnrollmentPoint:
    properties:
      point:
        type: integer
    required:
    - point
    type: object
  models.UpdateEnrollmentProgress:
    properties:
      progress:
        type: number
    required:
    - progress
    type: object
  models.UpdatePasswordAfterForgotPassword:
    properties:
      new_password:
        type: string
    required:
    - new_password
    type: object
  models.UpdateUserProfileRequest:
    properties:
      description:
        type: string
      email:
        type: string
      first_name:
        type: string
      gender:
        type: string
      last_name:
        type: string
      phone_number:
        type: string
      photo_profile_link:
        type: string
      title_desc_profile:
        type: string
    type: object
  models.UpdateUserTitleSkillRequest:
    properties:
      subtitle:
        type: string
      title_skill:
        type: string
      updated_at:
        type: string
    type: object
  models.UserAchievement:
    properties:
      achievement_category:
        type: string
      achievement_description:
        type: string
      achievement_icon:
        type: string
      achievement_id:
        type: string
      achievement_title:
        type: string
      custom_targets:
        items:
          $ref: '#/definitions/models.TdCustomTarget'
        type: array
      is_achieved:
        type: boolean
      user_id:
        type: string
    type: object
  models.UserModel:
    properties:
      achievements:
        items:
          $ref: '#/definitions/models.UserAchievement'
        type: array
      created_by:
        type: string
      description:
        type: string
      email:
        type: string
      email_verified:
        type: boolean
      first_name:
        type: string
      gender:
        type: string
      id:
        type: string
      last_name:
        type: string
      phone_number:
        type: string
      phone_verified:
        type: boolean
      photo_profile_link:
        type: string
      ranks:
        items:
          $ref: '#/definitions/models.UserRank'
        type: array
      status:
        type: string
      title_desc_profile:
        type: string
      title_skills:
        items:
          $ref: '#/definitions/models.UserTitleSkill'
        type: array
      total_courses_finished:
        type: integer
      total_point_achieved:
        type: integer
      total_subcourses_finished:
        type: integer
      updated_at:
        type: string
      updated_by:
        type: string
      username:
        type: string
    type: object
  models.UserRank:
    properties:
      is_obtained:
        type: boolean
      obtained_at:
        type: string
      rank_description:
        type: string
      rank_icon:
        type: string
      rank_id:
        type: string
      rank_title:
        type: string
      user_id:
        type: string
    type: object
  models.UserRoleResponse:
    properties:
      role_data:
        items:
          $ref: '#/definitions/models.RoleModel'
        type: array
      role_id:
        type: string
      user_data:
        $ref: '#/definitions/models.UserModel'
      user_id:
        type: string
    type: object
  models.UserTitleSkill:
    properties:
      created_at:
        type: string
      subtitle:
        type: string
      title_id:
        type: string
      title_skill:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
host: https://selfieapi.up.railway.app
info:
  contact:
    email: fiber@swagger.io
    name: API Support
  description: RESTful Self-ie Academy API Services. Built to ensure Self-ie Services
    are good to be served!
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Self-Ie API Services
  version: "1.0"
paths:
  /aboutus:
    get:
      consumes:
      - application/json
      description: Get all About Us components
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Land_Aboutus_Response'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Get all About Us components
      tags:
      - AboutUs Service
    post:
      consumes:
      - application/json
      description: Create a new About Us component
      parameters:
      - description: About Us component data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.Land_Aboutus_Request'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Land_Aboutus_Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StatusModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Create a new About Us component
      tags:
      - AboutUs Service
  /aboutus/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an About Us component
      parameters:
      - description: About Us component ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/models.StatusModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StatusModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StatusModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Delete an About Us component
      tags:
      - AboutUs Service
    get:
      consumes:
      - application/json
      description: Get an About Us component by ID
      parameters:
      - description: About Us component ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Land_Aboutus_Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StatusModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StatusModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Get an About Us component by ID
      tags:
      - AboutUs Service
    put:
      consumes:
      - application/json
      description: Update an About Us component
      parameters:
      - description: About Us component ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated About Us component data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.Land_Aboutus_Request'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Land_Aboutus_Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StatusModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StatusModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Update an About Us component
      tags:
      - AboutUs Service
  /auth/failed:
    get:
      consumes:
      - application/json
      description: When Redirected To This Service, It Will Return JSON Response With
        Various Error Message
      parameters:
      - description: Get The type Value When Being Redirected from Forgot Password
          Recovery or Verify Signup
        in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StatusModel'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.StatusModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Failed Auth Service Messages and Status Responser
      tags:
      - Auth Service
  /auth/send-forgot-password-email:
    post:
      consumes:
      - application/json
      description: Request Body need email.
      parameters:
      - description: Forgot Password Requirement
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StatusModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StatusModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Send Email For Forgot Password Feature
      tags:
      - Auth Service
  /auth/signin-email-password:
    post:
      consumes:
      - application/json
      description: Signing In A User Using Email and Password. Request Body need email
        and password.
      parameters:
      - description: Sign In Credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.SignInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ParseSessionsForAuth'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StatusModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StatusModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Sign In A User With Email Password
      tags:
      - Auth Service
  /auth/signout:
    post:
      consumes:
      - application/json
      description: Signing Out A User. Required Authenticated User.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StatusModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StatusModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StatusModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Sign Out A User
      tags:
      - Auth Service
  /auth/signup-admin:
    post:
      consumes:
      - application/json
      description: Signing Up A Admin Using Email and Password. Request Body need
        email, password, and username.
      parameters:
      - description: Sign Up Credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.SignUpRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ParseSessionsForAuth'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StatusModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StatusModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Sign Up A Admin With Email Password
      tags:
      - Auth Service
  /auth/signup-email-password:
    post:
      consumes:
      - application/json
      description: Signing Up A User Using Email and Password. Request Body need email,
        password, and username.
      parameters:
      - description: Sign Up Credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.SignUpRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ParseSessionsForAuth'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StatusModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StatusModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Sign Up A User With Email Password
      tags:
      - Auth Service
  /auth/signup-super:
    post:
      consumes:
      - application/json
      description: Signing Up A SuperUser Using Email and Password. Request Body need
        email, password, and username.
      parameters:
      - description: Sign Up Credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.SignUpRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ParseSessionsForAuth'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StatusModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StatusModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Sign Up A SuperUser With Email Password
      tags:
      - Auth Service
  /auth/update-user-password:
    put:
      consumes:
      - application/json
      description: Request Body need new_password.
      parameters:
      - description: Update The Password
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdatePasswordAfterForgotPassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StatusModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StatusModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Update The User Password (After Confirming From Verify Password Recovery)
      tags:
      - Auth Service
  /auth/verify-password-recovery:
    get:
      consumes:
      - application/json
      description: Request Body need email, password, and username. Required SendForgotPasswordEmail.
      parameters:
      - description: The Request Type From Confirmation Email
        in: query
        name: type
        required: true
        type: string
      - description: Secret Token Hashed From Confirmation Email
        in: query
        name: token_hash
        required: true
        type: string
      - description: Redirect API URL From Confirmation Email
        in: query
        name: redirect_to
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StatusModel'
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Verifying Forgotten Password
      tags:
      - Auth Service
  /auth/verify-signup:
    get:
      consumes:
      - application/json
      description: Not Very Useful At The Moment
      parameters:
      - description: The Request Type From Confirmation Email
        in: query
        name: type
        required: true
        type: string
      - description: Secret Token Hashed From Confirmation Email
        in: query
        name: token_hash
        required: true
        type: string
      - description: Redirect API URL From Confirmation Email
        in: query
        name: redirect_to
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StatusModel'
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Verify New Signed Up User
      tags:
      - Auth Service
  /courses/:
    get:
      consumes:
      - application/json
      description: Get all courses only
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/models.CourseModel'
              type: array
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Get all courses only
      tags:
      - Courses Service
  /courses/{courseid}/enroll:
    post:
      consumes:
      - application/json
      description: Enroll a user to a course
      parameters:
      - description: Course ID
        in: path
        name: courseid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.StatusModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StatusModel'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Enroll a user to a course
      tags:
      - Courses Service
  /courses/{courseid}/enrollment/data:
    get:
      consumes:
      - application/json
      description: Get enrolled course data
      parameters:
      - description: Course ID
        in: path
        name: courseid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.EnrollmentModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StatusModel'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.StatusModel'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Get enrolled course data
      tags:
      - Courses Service
  /courses/{courseid}/enrollment/point:
    patch:
      consumes:
      - application/json
      description: Update enrollment point
      parameters:
      - description: Course ID
        in: path
        name: courseid
        required: true
        type: string
      - description: Updated enrollment point
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateEnrollmentPoint'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StatusModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StatusModel'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.StatusModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Update enrollment point
      tags:
      - Courses Service
  /courses/{courseid}/enrollment/progress:
    patch:
      consumes:
      - application/json
      description: Update enrollment progress
      parameters:
      - description: Course ID
        in: path
        name: courseid
        required: true
        type: string
      - description: Updated enrollment progress
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateEnrollmentProgress'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StatusModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StatusModel'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.StatusModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Update enrollment progress
      tags:
      - Courses Service
  /courses/{courseid}/enrollment/status:
    get:
      consumes:
      - application/json
      description: Check enrollment status for a course
      parameters:
      - description: Course ID
        in: path
        name: courseid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StatusModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StatusModel'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.StatusModel'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Check enrollment status for a course
      tags:
      - Courses Service
  /courses/{courseid}/subcourses:
    get:
      consumes:
      - application/json
      description: Get sub-courses by course ID
      parameters:
      - description: Course ID
        in: path
        name: courseid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CourseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Get sub-courses by course ID
      tags:
      - Courses Service
  /courses/all:
    get:
      consumes:
      - application/json
      description: Get all courses and their sub-courses
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/models.CourseModel'
              type: array
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Get all courses and their sub-courses
      tags:
      - Courses Service
  /custom_targets:
    get:
      consumes:
      - application/json
      description: Get all td_customtarget records
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TdCustomTarget'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Get all custom targets
      tags:
      - TodoList Service
    post:
      consumes:
      - application/json
      description: Save a custom target with specified time, title, and description
        for 30 days
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RequestCustomTarget'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StatusModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StatusModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Save a custom target
      tags:
      - TodoList Service
  /custom_targets/{targetID}/check_progress:
    put:
      consumes:
      - application/json
      description: Check if a target has been checked for 30 consecutive days and
        award an achievement
      parameters:
      - description: Target ID
        in: path
        name: targetID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StatusModel'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.StatusModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Check custom target progress for achievement
      tags:
      - TodoList Service
  /custom_targets/{targetID}/checklist:
    put:
      consumes:
      - application/json
      description: Update the checklist status for a custom target
      parameters:
      - description: Target ID
        in: path
        name: targetID
        required: true
        type: string
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StatusModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StatusModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Update checklist
      tags:
      - TodoList Service
  /custom_targets/user:
    get:
      consumes:
      - application/json
      description: Get td_customtarget records for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ParseCustomTargetFromAchievement'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.StatusModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Get custom targets by user ID
      tags:
      - TodoList Service
  /dashboard/profile:
    get:
      consumes:
      - application/json
      description: Get the profile of the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserRoleResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.StatusModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Get user profile
      tags:
      - Dashboard Service
    put:
      consumes:
      - application/json
      description: Update the profile of the authenticated user
      parameters:
      - description: Update User Profile Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StatusModel'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.StatusModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Update user profile
      tags:
      - Dashboard Service
  /dashboard/sidebar:
    get:
      consumes:
      - application/json
      description: Get sidebar mapping for the authenticated user based on their roles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.RoleSidebarResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.StatusModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Get sidebar mapping for the user
      tags:
      - Dashboard Service
  /dashboard/skill:
    put:
      consumes:
      - application/json
      description: Update the skill of the authenticated user
      parameters:
      - description: Update User Skill Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserTitleSkillRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StatusModel'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.StatusModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Update user skill
      tags:
      - Dashboard Service
  /faq:
    get:
      consumes:
      - application/json
      description: Get all FAQ components
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/models.Land_Faq_Response'
              type: array
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Get all FAQ components
      tags:
      - FAQ Service
    post:
      consumes:
      - application/json
      description: Create a new FAQ component
      parameters:
      - description: FAQ component data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.Land_Faq_Request'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.StatusModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StatusModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Create a new FAQ component
      tags:
      - FAQ Service
  /faq/{id}:
    get:
      consumes:
      - application/json
      description: Get a FAQ component by ID
      parameters:
      - description: FAQ component ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Land_Faq_Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StatusModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StatusModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Get a FAQ component by ID
      tags:
      - FAQ Service
    put:
      consumes:
      - application/json
      description: Update a FAQ component
      parameters:
      - description: FAQ component ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated FAQ component data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.Land_Faq_Request'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StatusModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StatusModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StatusModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Update a FAQ component
      tags:
      - FAQ Service
  /faqcategory:
    get:
      consumes:
      - application/json
      description: Get all FAQ categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/models.Land_Faqcategory_Response'
              type: array
            type: array
        "500":
          description: Internal Server Error
          schema:
            type: object
      summary: Get all FAQ categories
      tags:
      - FAQ Category Service
    post:
      consumes:
      - application/json
      description: Create a new FAQ category
      parameters:
      - description: FAQ category data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.Land_Faqcategory_Request'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.StatusModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StatusModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Create a new FAQ category
      tags:
      - FAQ Category Service
  /faqcategory/{id}:
    get:
      consumes:
      - application/json
      description: Get a FAQ category by ID
      parameters:
      - description: FAQ category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Land_Faqcategory_Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StatusModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StatusModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Get a FAQ category by ID
      tags:
      - FAQ Category Service
    put:
      consumes:
      - application/json
      description: Update a FAQ category
      parameters:
      - description: FAQ category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated FAQ category data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.Land_Faqcategory_Request'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StatusModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StatusModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StatusModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Update a FAQ category
      tags:
      - FAQ Category Service
  /footer:
    get:
      consumes:
      - application/json
      description: Get all Footer components
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Land_Footer_Response'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Get all Footer components
      tags:
      - Footer Service
    post:
      consumes:
      - application/json
      description: Create a new Footer component
      parameters:
      - description: Footer component data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.Land_Footer_Request'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Land_Footer_Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StatusModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Create a new Footer component
      tags:
      - Footer Service
  /footer/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a Footer component
      parameters:
      - description: Footer component ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StatusModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StatusModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Delete a Footer component
      tags:
      - Footer Service
    get:
      consumes:
      - application/json
      description: Get a Footer component by ID
      parameters:
      - description: Footer component ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Land_Footer_Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StatusModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StatusModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Get a Footer component by ID
      tags:
      - Footer Service
    put:
      consumes:
      - application/json
      description: Update a Footer component
      parameters:
      - description: Footer component ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated Footer component data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.Land_Footer_Request'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Land_Footer_Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StatusModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StatusModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Update a Footer component
      tags:
      - Footer Service
  /healthcheck:
    get:
      description: Get API Health Check Status
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.HealthMap'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.HealthMap'
      summary: Get API Health Check Status
      tags:
      - CheckUp
  /hero:
    get:
      consumes:
      - application/json
      description: Get all hero components
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Land_Hero_Response'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Get all hero components
      tags:
      - Hero Service
    post:
      consumes:
      - application/json
      description: Create a new hero component
      parameters:
      - description: Hero component data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.Land_Hero_Request'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StatusModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StatusModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Create a new hero component
      tags:
      - Hero Service
  /hero/{id}:
    get:
      consumes:
      - application/json
      description: Get a hero component by ID
      parameters:
      - description: Hero component ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Land_Hero_Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StatusModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StatusModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Get a hero component by ID
      tags:
      - Hero Service
    put:
      consumes:
      - application/json
      description: Update a hero component
      parameters:
      - description: Hero component ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated hero component data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.Land_Hero_Request'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StatusModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StatusModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StatusModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Update a hero component
      tags:
      - Hero Service
  /leaderboard/rank:
    get:
      description: Get 100 Top Users With Highest Achieved Points Based On Category
        Filter
      parameters:
      - description: filter by category
        in: query
        name: category
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserModel'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Get 100 Top Users With Highest Achieved Points Based On Category Filter
      tags:
      - Leaderboard Service
  /leaderboard/ranks:
    get:
      description: Get 100 Top Users With Highest Achieved Points
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserModel'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Get 100 Top Users With Highest Achieved Points
      tags:
      - Leaderboard Service
  /liveness-check:
    get:
      description: Get Liveness Check Status
      produces:
      - text/plain
      responses: {}
      summary: Get Liveness Check Status
      tags:
      - CheckUp
  /navbar:
    get:
      consumes:
      - application/json
      description: Get all navbar components
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Land_Navbar_Response'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Get all navbar components
      tags:
      - Navbar Service
    post:
      consumes:
      - application/json
      description: Create a new navbar component
      parameters:
      - description: Navbar component data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.Land_Navbar_Request'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StatusModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StatusModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Create a new navbar component
      tags:
      - Navbar Service
  /navbar/{id}:
    get:
      consumes:
      - application/json
      description: Get a navbar component by ID
      parameters:
      - description: Navbar component ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Land_Navbar_Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StatusModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StatusModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Get a navbar component by ID
      tags:
      - Navbar Service
    put:
      consumes:
      - application/json
      description: Update a navbar component
      parameters:
      - description: Navbar component ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated navbar component data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.Land_Navbar_Request'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StatusModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StatusModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StatusModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Update a navbar component
      tags:
      - Navbar Service
  /subcourse_reminders:
    get:
      consumes:
      - application/json
      description: Get all td_subcoursereminder records
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TdSubcourseReminder'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Get all subcourse reminders
      tags:
      - TodoList Service
    post:
      consumes:
      - application/json
      description: Save a subcourse reminder with specified date and time
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RequestTdSubcourseReminder'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StatusModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StatusModel'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.StatusModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Save a subcourse reminder
      tags:
      - TodoList Service
  /subcourse_reminders/{reminderID}:
    delete:
      consumes:
      - application/json
      description: Delete a subcourse reminder for the authenticated user by reminder
        ID
      parameters:
      - description: Reminder ID
        in: path
        name: reminderID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StatusModel'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.StatusModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Delete a selected subcourse reminder
      tags:
      - TodoList Service
  /subcourse_reminders/auto_finish:
    post:
      consumes:
      - application/json
      description: Auto finish td_subcoursereminder records if their subcourse is
        finished
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StatusModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Auto finish subcourse reminders
      tags:
      - TodoList Service
  /subcourse_reminders/user:
    get:
      consumes:
      - application/json
      description: Get td_subcoursereminder records for a specific user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TdSubcourseReminder'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Get subcourse reminders by user ID
      tags:
      - TodoList Service
  /subcourses/not_selected:
    get:
      consumes:
      - application/json
      description: Get subcourses that have not been selected by the user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TdSubcourseReminder'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.StatusModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Get subcourses not selected
      tags:
      - TodoList Service
  /subcourses/selected:
    get:
      consumes:
      - application/json
      description: Get subcourses that have been selected by the user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TdSubcourseReminder'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.StatusModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Get selected subcourses
      tags:
      - TodoList Service
  /todos:
    get:
      consumes:
      - application/json
      description: Get all td_customtarget and td_subcoursereminder records
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/To_do_list.Todoall'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Get all custom targets and subcourse reminders
      tags:
      - TodoList Service
  /todos/user:
    get:
      consumes:
      - application/json
      description: Get all td_customtarget and td_subcoursereminder records for a
        specific user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/To_do_list.Todoall'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.StatusModel'
      summary: Get all todos by user ID
      tags:
      - TodoList Service
produces:
- application/json
swagger: "2.0"
